h1. generate-all
{hidden}
h2. Purpose

Generates a controller, views, and a controller unit test for the given domain class

h2. Examples
{hidden}

h2. Propósito

Genera un controlador, vista y una unidad de test del controlador para una clase de dominio dada.

h2. Ejemplos

{code:java}
grails generate-all org.bookstore.Book
grails generate-all *
{code}

{hidden}
h2. Description

Grails supports a feature known as scaffolding which involves the generation of a CRUD (Create/Read/Update/Delete) interface for a given domain class.

The generate-all command generates an implementation of CRUD including a controller and views for the given domain class. So for a domain class @org.bookstore.Book@ a controller in @grails-app/controllers/org/bookstore/BookController.groovy@ and views in @grails-app/views/book@ will be generated.

Usage:
{hidden}

h2. Descripción 

Grails es conocida por una característica conocida como scaffolding que implica la generación de una interfaz CRUD (Crear/Leer/Modificar/Eliminar) para la clase de dominio dada.

El comando generate-all genera una implementación de CRUD incluyendo un controlador y vista para la clase de dominio dada. Asi es que la clase de dominio @org.bookstore.Book@ un controlados en @grails-app/controllers/org/bookstore/BookController.groovy@ y vistas en @grails-app/views/book@ serán generadas.

Uso:
{code:java}
grails generate-all [name]
{code}

Fired Events:

{hidden}
* @StatusUpdate@ - When generation begins
* @StatusFinal@ - When generation completes

Arguments:

* @name@ - Either a domain class name (case-sensitive) or a wildcard (\*). If you specify the wildcard then controllers and views will be generated for _all_ domain classes.
{hidden}

* @StatusUpdate@ - Cuando comienza la generación
* @StatusFinal@ - Cuando finaliza la generación

Argumentos:

* @name@ - Ya sea un nombre de clase de dominio (case-sensitive) o un comodín (\*). Si especifica el comodín entonces los controladores y vistas son generadas por _todas_ las clases de dominio.

